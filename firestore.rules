/**
 * @file Firestore Security Rules for LC Agency Web Application.
 *
 * @corePhilosophy
 * This ruleset enforces a strict user-ownership model. Each user can only access their own profile data.
 *
 * @dataStructure
 * All user data is stored under the `/users/{userId}` path, where `{userId}` corresponds to the authenticated user's UID.
 *
 * @keySecurityDecisions
 * - User listing is disallowed for privacy.
 * - Write access to a user's document is restricted to the owning user only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to individual user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can read, create, update, or delete the document at /users/user123.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot access the document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}