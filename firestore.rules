/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, admin-write model for testimonials
 * and a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /testimonials/{testimonialId}: Stores customer testimonials, publicly readable but only writable by authenticated users (e.g. admins).
 *
 * Key Security Decisions:
 * - Testimonials are publicly readable to showcase customer feedback.
 * - User profiles are strictly private, accessible only to the authenticated user.
 * - No user listing is allowed to protect user privacy.
 * - Unauthenticated users can read testimonials, but only authenticated users can modify them (e.g., admins adding new testimonials)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own profile if the userId matches their auth UID.
     * @allow (update, delete) - Authenticated user can update or delete their own profile if the userId matches their auth UID and the document exists.
     * @deny (create) - Unauthenticated user cannot create any user profile.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer testimonial documents.
     * @path /testimonials/{testimonialId}
     * @allow (get, list) - Everyone can read testimonials.
     * @allow (create) - Only authenticated users can create testimonials.
     * @allow (update, delete) - Only authenticated users can update or delete testimonials, and only if the document exists.
     * @deny (create, update, delete) - Unauthenticated users cannot modify testimonials.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /testimonials/{testimonialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/testimonials/$(testimonialId));
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/testimonials/$(testimonialId));
    }
  }
}